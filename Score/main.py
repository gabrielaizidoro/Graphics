# -*- coding: utf-8 -*-
"""
üìä Score - Processamento, Concilia√ß√£o e Acur√°cia
Autor: Gabriela Izidoro
Vers√£o: 1.0
Descri√ß√£o: Este script l√™ um Excel de base de comiss√µes, calcula indicadores e notas conforme crit√©rios definidos,
cria abas com notas de processamento, concilia√ß√£o e acur√°cia, al√©m de notas m√©dia e consolidada,
e uma nova aba com a m√©dia das notas por item em formato de tabela din√¢mica,
e exporta o resultado em m√∫ltiplas abas separadas.
"""

import pandas as pd
import time
from datetime import datetime
import platform
import getpass

# =================== CONFIGURA√á√ÉO ===================
CAMINHO_INPUT = r"CAMINHODASUAPASTA\NOMEDOARQUIVO.xlsx"
CAMINHO_OUTPUT = r"CAMINHODASUAPASTA\NOMEDOARQUIVO.xlsx"

# ================ FUN√á√ïES AUXILIARES ================
def nota_score(p):
    """Retorna a nota de 1 a 5 com base no percentual"""
    if p < 0.60:
        return 1
    elif p < 0.80:
        return 2
    elif p < 0.95:
        return 3
    elif p < 0.99:
        return 4
    else:
        return 5

# Fun√ß√£o para formatar a data como DD/MM/AAAA, tratando datas incompletas/inv√°lidas
def formatar_data_completa(data_serie):
    """
    Formata uma s√©rie de datas para 'DD/MM/AAAA'.
    Se o dia for inv√°lido, assume '01' como dia.
    """
    # Converte para datetime, erros viram NaT
    datas_dt = pd.to_datetime(data_serie, errors='coerce')

    # Lista para armazenar as datas formatadas
    datas_formatadas = []

    for dt in datas_dt:
        if pd.isna(dt):
            # Apenas formatamos o que pd.to_datetime conseguiu converter.
            datas_formatadas.append(None)
        else:
            # Formata para DD/MM/AAAA
            datas_formatadas.append(dt.strftime('%d/%m/%Y'))
            
    return pd.Series(datas_formatadas)


# =================== EXECU√á√ÉO ===================
inicio = time.time()
print("\nüîç Carregando planilha de refer√™ncia...\n")

# Carregar base original
try:
    df_original = pd.read_excel(CAMINHO_INPUT)
    df = df_original.copy()
    print(f"‚úÖ Planilha de refer√™ncia '{CAMINHO_INPUT}' carregada com sucesso.")
except FileNotFoundError:
    print(f"‚ùå ERRO: Arquivo de input '{CAMINHO_INPUT}' n√£o encontrado. Verifique o caminho.")
    exit()
except Exception as e:
    print(f"‚ùå ERRO ao carregar o arquivo de input: {e}")
    exit()

# ============ AJUSTE DA COLUNA 'Data Refer√™ncia' ============
print("\nüîÑ Ajustando o formato da coluna 'Data Refer√™ncia' para DD/MM/AAAA, com dia 01 se ausente...")

# A formata√ß√£o '%d/%m/%Y' ent√£o garante '01/10/2025'.
df['Data Refer√™ncia'] = df['Data Refer√™ncia'].apply(
    lambda x: pd.to_datetime(x, errors='coerce')
).apply(
    lambda x: x.strftime('%d/%m/%Y') if pd.notna(x) else None # Usar None ou '' para NaT
)
# Renomeamos para que o nome original da coluna seja usado nas exporta√ß√µes futuras.
df['Data Refer√™ncia Formatada'] = df['Data Refer√™ncia']

print("‚úÖ Formato da coluna 'Data Refer√™ncia' ajustado para DD/MM/AAAA.")


# ============ C√ÅLCULOS DAS NOTAS EXISTENTES ============
print("\nüî¢ Realizando c√°lculos para as notas de Processamento, Concilia√ß√£o e Acur√°cia...")
# Garante que as colunas existam antes de calcular para evitar erros
colunas_necessarias = [
    "Valor Emiss√£o Processado (Correto)",
    "Valor Emiss√£o N√£o Processado (Erro)",
    "Qtd Processado (Correto)",
    "Qtd N√£o Processado (Erro)",
    "Valor Comiss√£o processado",
    "Valor Comiss√£o pago",
    "Fora do parametro"
]
for col in colunas_necessarias:
    if col not in df.columns:
        print(f"‚ùå ERRO: Coluna '{col}' n√£o encontrada na base de dados. Verifique o nome das colunas.")
        exit()

# Calcula nota do Processamento e substitui valores infinitos ou NaN resultantes de divis√µes por zero ou dados ausentes
# por 0 ou um valor apropriado para n√£o quebrar os c√°lculos de nota.
df["%_processado_valor"] = df["Valor Emiss√£o Processado (Correto)"].fillna(0) / (
    df["Valor Emiss√£o Processado (Correto)"].fillna(0) + df["Valor Emiss√£o N√£o Processado (Erro)"].fillna(0)
).replace(0, 1) # Evita divis√£o por zero, substituindo 0 por 1 no denominador

df["%_processado_qtd"] = df["Qtd Processado (Correto)"].fillna(0) / (
    df["Qtd Processado (Correto)"].fillna(0) + df["Qtd N√£o Processado (Erro)"].fillna(0)
).replace(0, 1)

df["%_processamento_ponderado"] = 0.7 * df["%_processado_valor"].fillna(0) + 0.3 * df["%_processado_qtd"].fillna(0)
# Nota de Processamento: converte percentual em nota de 1 a 5
df["Nota_processamento"] = df["%_processamento_ponderado"].apply(nota_score)

# Calcula nota da Concilia√ß√£o 
df["%_concilia√ß√£o"] = df["Valor Comiss√£o processado"].fillna(0) / df["Valor Comiss√£o pago"].fillna(0).replace(0, 1)
df["Nota_conciliacao"] = df["%_concilia√ß√£o"].apply(nota_score)

# Calcula nota da Acur√°cia 
# Acur√°cia √© calculada como 1 - (Fora do par√¢metro / (Valor Emiss√£o Processado + Valor Emiss√£o N√£o Processado))
df["%_acuracia"] = 1 - (
    df["Fora do parametro"].fillna(0) / (
        df["Valor Emiss√£o Processado (Correto)"].fillna(0) + df["Valor Emiss√£o N√£o Processado (Erro)"].fillna(0)
    ).replace(0, 1)
)
df["Nota_acuracia"] = df["%_acuracia"].apply(nota_score)

print("‚úÖ C√°lculos de notas de Processamento, Concilia√ß√£o e Acur√°cia finalizados.")

# ============ NOVOS C√ÅLCULOS: NOTA M√âDIA E NOTA CONSOLIDADA ============
print("\nüî¢ Calculando Nota M√©dia e Nota Consolidado...")

# Certifique-se de que as colunas de nota s√£o num√©ricas para o c√°lculo
df["Nota_processamento"] = pd.to_numeric(df["Nota_processamento"], errors='coerce').fillna(0)
df["Nota_conciliacao"] = pd.to_numeric(df["Nota_conciliacao"], errors='coerce').fillna(0)
df["Nota_acuracia"] = pd.to_numeric(df["Nota_acuracia"], errors='coerce').fillna(0)

# Nota M√©dia: M√©dia das 3 notas
df["Nota_media"] = (df["Nota_processamento"] + df["Nota_conciliacao"] + df["Nota_acuracia"]) / 3
# Arredondar para duas casas decimais
df["Nota_media"] = df["Nota_media"].round(2) 

# Nota Consolidado com PESO: (Nota_processamento * 4) + (Nota_conciliacao * 4) + (Nota_acuracia * 2) / 10
df["Nota_consolidado"] = (
    (df["Nota_processamento"] * 4) +
    (df["Nota_conciliacao"] * 4) +
    (df["Nota_acuracia"] * 2)
) / 10
df["Nota_consolidado"] = df["Nota_consolidado"].round(2) # Arredondar tamb√©m para a consolidada

print("‚úÖ C√°lculos de Nota M√©dia e Nota Consolidado finalizados.")

# ============ CRIA√á√ÉO DA NOVA ABA: M√©dia das Notas por Item ============
print("\nüìä Criando a aba 'M√©dia das Notas por Item'...")

# 'Data Refer√™ncia Formatada' para garantir o formato DD/MM/AAAA
df_melted = df.melt(
    id_vars=['Seguradora', 'Data Refer√™ncia Formatada'],
    value_vars=['Nota_processamento', 'Nota_conciliacao', 'Nota_acuracia'],
    var_name='Item da Nota',
    value_name='Valor da Nota'
)

# Criar a tabela din√¢mica
df_pivot = pd.pivot_table(
    df_melted,
    index=['Seguradora', 'Item da Nota'],
    columns='Data Refer√™ncia Formatada',
    values='Valor da Nota',
    aggfunc='mean' # Calcula a m√©dia dos valores para cada combina√ß√£o
)

# Adicionar a coluna 'M√©dia' no final
df_pivot['M√©dia'] = df_pivot.mean(axis=1).round(2) # Arredonda a m√©dia para 2 casas decimais

# Arredondar os valores (para as colunas de data)
df_pivot = df_pivot.round(2)

print("‚úÖ Aba 'M√©dia das Notas por Item' criada.")

# ========== EXPORTA√á√ÉO ==========
print("\nüìù Exportando todas as abas para o arquivo Excel de sa√≠da...")
try:
    with pd.ExcelWriter(CAMINHO_OUTPUT, engine="openpyxl") as writer:
        df_original.to_excel(writer, sheet_name="Base Original", index=False)
        
        # Usar 'Data Refer√™ncia Formatada' nas abas para o novo formato de data
        df_proc = df[["Seguradora", "Data Refer√™ncia Formatada", "%_processamento_ponderado", "Nota_processamento"]]
        df_proc.to_excel(writer, sheet_name="Processamento", index=False)
        
        df_conc = df[["Seguradora", "Data Refer√™ncia Formatada", "%_concilia√ß√£o", "Nota_conciliacao"]]
        df_conc.to_excel(writer, sheet_name="Concilia√ß√£o financeira", index=False)
        
        df_acur = df[["Seguradora", "Data Refer√™ncia Formatada", "%_acuracia", "Nota_acuracia"]]
        df_acur.to_excel(writer, sheet_name="Contrato_Acur√°cia", index=False)

        # Novas abas
        df_media = df[["Seguradora", "Data Refer√™ncia Formatada", "Nota_media"]]
        df_media.to_excel(writer, sheet_name="Nota Media", index=False)

        df_consolidado = df[["Seguradora", "Data Refer√™ncia Formatada", "Nota_consolidado"]]
        df_consolidado.to_excel(writer, sheet_name="Nota Consolidado", index=False)

        # Exportar a nova aba
        df_pivot.to_excel(writer, sheet_name="M√©dia das Notas por Item")
        
    print(f"‚úÖ Todas as abas foram exportadas para '{CAMINHO_OUTPUT}'.")
except Exception as e:
    print(f"‚ùå ERRO ao exportar as abas do Excel: {e}")
    print("Certifique-se de que o arquivo n√£o est√° aberto e que voc√™ tem permiss√£o de escrita.")
    exit()

print("\n‚úÖ Arquivo Excel salvo com sucesso.")

# ========== LOG FINAL ==========
print(f"""
---
üßë Usu√°rio: {getpass.getuser()}
üíª M√°quina: {platform.node()}
üêç Python : {platform.python_version()}
üìÖ Data   : {datetime.today().strftime('%Y-%m-%d %H:%M:%S')}
‚è±Ô∏è Tempo   : {round(time.time() - inicio, 2)} segundos

üì• Input  : {CAMINHO_INPUT}
üì§ Output : {CAMINHO_OUTPUT}
---
""")